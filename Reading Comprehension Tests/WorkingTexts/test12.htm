<html>
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Valentin Kataev."></meta><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>
<title>
Test 12
</title>

<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie4 && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}



function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#fbfbfb';



var PageBGColor = '#fcf0cd';



var NavBarColor = '#8080c0';


var TextColor = '#008080';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = ':-)';
var IncorrectIndicator = 'X';
var YourScoreIs = '<b><Font color="#3300CC">Your score is</Font></b>';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = false;
var CorrectFirstTime = '<b><Font color="#0099FF" size="2">Questions answered correctly first time:</Font></b> ';var ExerciseTitle = '<b><Font color="#00CC33">Test 12</Font></b>';
var ExerciseSubtitle = '<b><Font color= "#CC0099">I. Read the text abd choose the best answer.</Font></b>';
var Instructions = ''; //'';
var ShuffleQs = true;
var ShuffleAs = true;
var DefaultRight = '<b><Font color="#CC0000">Correct!</Font></b>';
var DefaultWrong = '<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
var QsToShow = 6;
var ShowOneByOne = true;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;



ReadingText='<html><head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Valentin Kataev."></meta><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta><title>RUBBISH</title></head><body background="back_full_u.gif" bgcolor="#fcf0cd" text="#008080" link="#0000ff" vlink="#0000cc"><center><table border="0" cellpadding="5" cellspacing="1" width="85%"><tr><td align="center" bgcolor="#fcf0cd"><font size="+1" face="Geneva,Arial" color="#0000a0"><b><Font color="#3300FF">RUBBISH</Font></b><br></br></font></td></tr><tr><td bgcolor="#fbfbfb"><font face="Geneva,Arial" size="-1" color="#008080"><b><Font size="2"><br /> &nbsp;&nbsp;&nbsp;&nbsp;It is surprising what you can find in dustbins. A short time ago the Camden dustmen went on strike, because the authorities were going to prevent them from sorting through the rubbish for things they might sell. In the Daily Mirror of 4th November, Christopher Ward wrote an amusing article on the contents of dustbins.<br /> &nbsp;&nbsp;&nbsp;&nbsp;\'I was walking along Carnaby Street at three o\'clock the other morning when I met a well-dressed man with his head in a dustbin. Carnaby Street is always a good place for a laugh at someone else\'s expense, and I certainly wasn\'t going to miss this <Font color="#CC0000">one</Font>. But before I could offer to put the lid on for him, he emerged from the bin triumphantly holding a John Stephen Flower Power jacket.<br /> &nbsp;&nbsp;&nbsp;&nbsp;\'Fabulous, isn\'t it?\' he said, dusting down his prize. \'I get all my clothes like this - except my underwear of course.\' &nbsp;&nbsp;&nbsp;&nbsp;\'What else have you found in dustbins?\' I asked. The man put the lid back on the bin and sat on it.<br /> &nbsp;&nbsp;&nbsp;&nbsp;\'You see this shirt? Well, it came from Simpson\'s dustbin. My tie and matching silk handkerchief were in a dustbin in Wardour Street.\'<br /> &nbsp;&nbsp;&nbsp;&nbsp;\'Those shoes you\'re wearing, they\'re very smart too,\' I said.<br /> &nbsp;&nbsp;&nbsp;&nbsp;They come from a dustbin in Regent Street. I even got a six-month guarantee with them. Now, if you\'ll excuse me, I must go. If I stay here all night talking to you, someone else will get all the good things before me.\'<br /> &nbsp;&nbsp;&nbsp;&nbsp;As soon as he had gone, two Hippies came round the corner and started to look through what was left in the bin. To my surprise, they discovered an ivory paper-knife and a long piece of silk. They seemed disappointed that they hadn\'t found at least four Hardy Amies suits.<br /> &nbsp;&nbsp;&nbsp;&nbsp;I explained that someone had been there before them. They didn\'t mind. There was plenty for everybody. One of them said that a short time ago, they had put on a play with a cast of thirty and all the costumes had come out of the dustbins in Carnaby Street.\'<br /> &nbsp;&nbsp;&nbsp;&nbsp;Christopher Ward does warn his readers that it is illegal to steal from dustbins. \'The reasons are obvious. For a start, Carnaby Street shopkeepers would be ruined if everyone helped himself to a binful of rubbish round the back, instead of buying it over the counter.<br /> &nbsp;&nbsp;&nbsp;&nbsp;You can imagine what the dustmen must think of all this stealing. When they arrive, there\'s nothing but rubbish left.\'<br /></b></Font></font></td></tr></table></center></body></html>';


if (is.CRAPBrowser){ReadingText=ResolveAllURLs(ReadingText);}


var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#8080c0" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';



NavBar+='<input type="button" value="=&gt;" onclick=\'parent.location="test12_2.htm"\'></input>';
NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar)};


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#fcf0cd">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#0000a0">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#0000a0">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#fbfbfb" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#008080">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#fbfbfb"><font size="-1" face="Geneva,Arial" color="#008080">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#fbfbfb"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#fbfbfb"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#fbfbfb"><font size="-1" face="Geneva,Arial" color="#008080">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#fbfbfb" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#008080">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#fbfbfb" ><input type="button" value="Check"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="back_full_u.gif" bgcolor="#fcf0cd" text="#008080" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#fbfbfb" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#008080">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Write the reading frame
	ShowReading();



//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='<b>What did the Camden dustmen do a short time ago?</b>';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='<b>They helped themselves to clothes.</b>';
I[0][1][0][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='<b>They looked surprised at what they found in dustbins.</b>';
I[0][1][1][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[0][1][1][2] = 0;
I[0][1][2] = new Array();
I[0][1][2][0]='<b>They refused to sort the rubbish any more.</b>';
I[0][1][2][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[0][1][2][2] = 0;
I[0][1][3] = new Array();
I[0][1][3][0]='<b>They stopped working.</b>';
I[0][1][3][1]='<b><Font color="#CC0000">Correct!</Font></b>';
I[0][1][3][2] = 1;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='<b>Why did the Camden dustmen go on a strike?</b>';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='<b>The authorities did not want them to work any more.</b>';
I[1][1][0][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[1][1][0][2] = 0;
I[1][1][1] = new Array();
I[1][1][1][0]='<b>The authorities were going to sell all the dustbins.</b>';
I[1][1][1][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[1][1][1][2] = 0;
I[1][1][2] = new Array();
I[1][1][2][0]='<b>The dustmen did not want to search the dustbins with their hands any more.<br /></b>';
I[1][1][2][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[1][1][2][2] = 0;
I[1][1][3] = new Array();
I[1][1][3][0]='<b>The dustmen were not allowed to take things from the dustbins any more.<br /></b>';
I[1][1][3][1]='<b><Font color="#CC0000">Correct!</Font></b>';
I[1][1][3][2] = 1;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='<b>What did Christopher Ward write an article about?</b>';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='<b>About the advantages of dustbins.</b>';
I[2][1][0][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[2][1][0][2] = 0;
I[2][1][1] = new Array();
I[2][1][1][0]='<b>About the disadvantages of dustbins.</b>';
I[2][1][1][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[2][1][1][2] = 0;
I[2][1][2] = new Array();
I[2][1][2][0]='<b>About the reasons why people are content with their dustbins.</b>';
I[2][1][2][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[2][1][2][2] = 0;
I[2][1][3] = new Array();
I[2][1][3][0]='<b>About what is to be found in dustbins.</b>';
I[2][1][3][1]='<b><Font color="#CC0000">Correct!</Font></b>';
I[2][1][3][2] = 1;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='<b>What struck him when he was walking in Carnaby Street?</b>';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='<b>That he saw a well-dressed man there. </b>';
I[3][1][0][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[3][1][0][2] = 0;
I[3][1][1] = new Array();
I[3][1][1][0]='<b>That he saw someone there at that hour. </b>';
I[3][1][1][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[3][1][1][2] = 0;
I[3][1][2] = new Array();
I[3][1][2][0]='<b>That he saw such a man nosing in a dustbin.</b>';
I[3][1][2][1]='<b><Font color="#CC0000">Correct!</Font></b>';
I[3][1][2][2] = 1;
I[3][1][3] = new Array();
I[3][1][3][0]='<b>That the man seemed to have no head.</b>';
I[3][1][3][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[3][1][3][2] = 0;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='<b>What does the word \'one\' stand for?</b>';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='<b>For a place.</b>';
I[4][1][0][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='<b>For a laugh.</b>';
I[4][1][1][1]='<b><Font color="#CC0000">Correct!</Font></b>';
I[4][1][1][2] = 1;
I[4][1][2] = new Array();
I[4][1][2][0]='<b>For someone.</b>';
I[4][1][2][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[4][1][2][2] = 0;
I[4][1][3] = new Array();
I[4][1][3][0]='<b>For a bin.</b>';
I[4][1][3][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[4][1][3][2] = 0;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='<b>What did the man do with the jacket?</b>';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='<b>He cleaned it a bit.</b>';
I[5][1][0][1]='<b><Font color="#CC0000">Correct!</Font></b>';
I[5][1][0][2] = 1;
I[5][1][1] = new Array();
I[5][1][1][0]='<b>&#205;&#229; hid it under his coat.</b>';
I[5][1][1][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[5][1][1][2] = 0;
I[5][1][2] = new Array();
I[5][1][2][0]='<b>&#205;&#229; put it down into the dustbin again.</b>';
I[5][1][2][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[5][1][2][2] = 0;
I[5][1][3] = new Array();
I[5][1][3][0]='<b>He put it on.</b>';
I[5][1][3][1]='<b><Font color="#00CC99">Sorry! Try again.</Font></b>';
I[5][1][3][2] = 0;
I[5][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function UpdateQuestionStatus(QNum){
	if (Status[QNum][2] >= Status[QNum][1].length-1){
		Status[QNum][0] = 1;
		for (var i=0; i<Status[QNum][1].length; i++){
			if (Status[QNum][1][i] == '0'){
				Status[QNum][1][i] = 'R';
			}
		}
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CalculateScore();
		var CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="back_full_u.gif" bgcolor="#fcf0cd" text="#008080" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#fbfbfb" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

	UpdateQuestionStatus(QNum);

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}

	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function CalculateScore(){
	var TriedQs = 0;
	var TotalScore = 0;
	for (var i=0; i<Status.length; i++){
		if ((Status[i][2] > 0)||(Status[i][3] == 1)){
			TriedQs++;
			TotalScore += Status[i][3];
		}
	}
	if (TriedQs == 0){
		Score = 0;
	}
	else{
		Score = (Math.floor(100 * (TotalScore/TriedQs)));
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}


function ShowReading(){
	if (ReadingFrame != null){
		if (ReadingURL.length > 0){
			ReadingFrame.location.href=ReadingURL;
		}
		else{
			ReadingFrame.document.clear();
			ReadingFrame.document.open();
			ReadingFrame.document.write(ReadingText);
			ReadingFrame.document.close();
		}
	}
}






function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script>


</head>
<!--<body>Fool those dumb ad-inserting ISPs</body>-->

<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->





<frameset cols = "50%,50%" framespacing="0" border="0">
  <frameset rows = "20%,*" onload="StartUp()" framespacing="0" border="0">
	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>
	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame>
   </frameset>
  <frame src="javascript:parent.Blank()" frameborder="0" name="ReadingFrame"></frame>
</frameset>





</html>
